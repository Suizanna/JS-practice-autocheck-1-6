/*
 * –û–±—ä–µ–∫—Ç—ã (–¥–µ–ª–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –º—É–∑—ã–∫–∏: –∏–º—è, —Ä–µ–π—Ç–∏–Ω–≥, —Ç—Ä–µ–∫–∏, –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤)
 * - –õ–∏—Ç–µ—Ä–∞–ª –æ–±—ä–µ–∫—Ç–∞
 * - –°–≤–æ–π—Å—Ç–≤–∞, –∫–ª—é—á–∏ (–∏–º—è) –∏ –∑–Ω–∞—á–µ–Ω–∏—è
 * - –ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 */

// const playlist = {
//   name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//   rating: 5,
//   tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
//   trackCount: 3,
// };

// console.log(playlist);

// const x = {};

// const fn = function (myObject) {
//   // myObject = { a: 1, b: 2 }
//   console.log(myObject);
// };

// fn({ a: 1, b: 2 });

// const rtfm = function () {
//   return { a: 5 };
// };

// console.log(rtfm());

/*
 * –î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤—É
 * - obj.key
 * - obj['key']
 * - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
 */

const playlist = {
    name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
    rating: 5,
    tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
    trackCount: 3,
  };
  
  // playlist.qwe = 5;
  
  // playlist.rating = 10;
  
  // console.log(playlist);
  
  // console.log(playlist);
  // console.log(playlist.tracks);
  // console.log(playlist.name);
  // console.log(playlist.trackCount);
  
  const propertyName = 'tracks';
  
  // console.log(playlist.rating);
  // console.log(playlist['rating']);
  
  // console.log(playlist.propertyName);
  // console.log(playlist[propertyName]);
  
  /*
   * –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å —Å–≤–æ–π—Å—Ç–≤
   */
  const username = 'Mango';
  const email = 'mango@mail.com';
  
  const signupData = {
    username,
    email,
  };
  
  // console.log(signupData);
  
  /*
   * –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
   */
  
  //  <input name="color" value="tomato" >
  
  const inputName = 'color';
  const inputValue = 'tomato';
  
  const colorPickerData = {
    [inputName]: inputValue,
  };
  
  // console.log(colorPickerData);
  
  /*
   * –°—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø {} === {}
   */
  
  // console.log({ a: 1 } === { a: 1 });
  // console.log([] === []);
  
  // const a = { x: 1, y: 2 };
  // const b = a;
  
  // console.log(b === a);
  
  // a.hello = 100;
  // b.hello = 150;
  
  // console.log(a);
  // console.log(b);
  
  /*
   * –ú–∞—Å—Å–∏–≤—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã
   */
  
  // const a = [1, 2, 3];
  
  // a.hello = ':)';
  
  // console.log(a);
  
  // const fn = function () {
  //   console.log('hello');
  // };
  
  // fn.hello = ';)';
  
  // console.dir(fn.hello);


  /*
 * –ú–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞ –∏ this –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –≤ –º–µ—Ç–æ–¥–∞—Ö
 *
 * http://fecore.net.ua/books/m5ph3r-javascript/module-03/images/context.jpg
 *
 * - changeName
 * - addTrack
 * - updateRating
 * - getTrackCount
 */

const playlist = {
    name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
    rating: 5,
    tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
    changeName(newName) {
      console.log('this –≤–Ω—É—Ç—Ä–∏ changeName: ', this);
  
      this.name = newName;
    },
    addTrack(track) {
      this.tracks.push(track);
    },
    updateRating(newRating) {
      this.rating = newRating;
    },
    getTrackCount() {
      return this.tracks.length;
    },
  };
  
  console.log(playlist.getTrackCount());
  
  playlist.changeName('–ù–æ–≤–æ–µ –∏–º—è');
  
  playlist.addTrack('–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 1');
  console.log(playlist.getTrackCount());
  
  playlist.addTrack('–Ω–æ–≤—ã–π —Ç—Ä–µ–∫ 2');
  console.log(playlist.getTrackCount());
  
  playlist.updateRating(4);
  
  console.log(playlist);


  /*
 * –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π (–º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤)
 */
const friends = [
    { name: 'Mango', online: false },
    { name: 'Kiwi', online: true },
    { name: 'Poly', online: false },
    { name: 'Ajax', online: false },
  ];
  
  console.table(friends);
  
  /*
   * –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  
  const findFriendByName = function (allFriends, friendName) {
    for (const friend of allFriends) {
      // console.log(friend);
      // console.log(friend.name);
  
      if (friend.name === friendName) {
        return '–ù–ê–®–õ–ò!!!';
      }
    }
  
    return '–ù–ï –ù–ê–®–õ–ò :(';
  };
  
  // console.log(findFriendByName(friends, 'Poly'));
  // console.log(findFriendByName(friends, 'Chelsy'));
  
  /*
   * –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
   */
  
  const getAllNames = function (allFriends) {
    const names = [];
  
    for (const friend of allFriends) {
      console.log(friend.name);
  
      names.push(friend.name);
    }
  
    return names;
  };
  
  // console.log(getAllNames(friends));
  
  /*
   * –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω
   */
  const getOnlineFriends = function (allFriends) {
    const onlineFriends = [];
  
    for (const friend of allFriends) {
      console.log(friend);
      console.log(friend.online);
  
      if (friend.online) {
        onlineFriends.push(friend);
      }
    }
  
    return onlineFriends;
  };
  
  // console.log(getOnlineFriends(friends));
  
  const getOfflineFriends = function (allFriends) {
    const offlineFriends = [];
  
    for (const friend of allFriends) {
      console.log(friend.online);
  
      if (!friend.online) {
        offlineFriends.push(friend);
      }
    }
  
    return offlineFriends;
  };
  
  // console.log(getOfflineFriends(friends));
  
  // —Å–æ–∑–¥–∞—Ç—å 2 –º–∞—Å—Å–∏–≤–∞ –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω?
  // –µ—Å–ª–∏ —Ç—Ä—É - –≤ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç - –≤–æ –≤—Ç–æ—Ä–æ–π
  
  const getFriendsByStatus = function (allFriends) {
    const friendsByStatus = {
      online: [],
      offline: [],
    };
  
    for (const friend of allFriends) {
      if (friend.online) {
        friendsByStatus.online.push(friend);
        continue;
      }
  
      friendsByStatus.offline.push(friend);
  
      // const key = friend.online ? 'online' : 'offline';
      // friendsByStatus[key].push(friend);
    }
  
    return friendsByStatus;
  };
  
  console.log(getFriendsByStatus(friends));


  /*
 * –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π (–º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤)
 */
const friends = [
    { name: 'Mango', online: false },
    { name: 'Kiwi', online: true },
    { name: 'Poly', online: false },
    { name: 'Ajax', online: false },
  ];
  
  console.table(friends);
  
  /*
   * –ò—â–µ–º –¥—Ä—É–≥–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  
  const findFriendByName = function (allFriends, friendName) {
    for (const friend of allFriends) {
      // console.log(friend);
      // console.log(friend.name);
  
      if (friend.name === friendName) {
        return '–ù–ê–®–õ–ò!!!';
      }
    }
  
    return '–ù–ï –ù–ê–®–õ–ò :(';
  };
  
  // console.log(findFriendByName(friends, 'Poly'));
  // console.log(findFriendByName(friends, 'Chelsy'));
  
  /*
   * –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
   */
  
  const getAllNames = function (allFriends) {
    const names = [];
  
    for (const friend of allFriends) {
      console.log(friend.name);
  
      names.push(friend.name);
    }
  
    return names;
  };
  
  // console.log(getAllNames(friends));
  
  /*
   * –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–ª–∞–π–Ω
   */
  const getOnlineFriends = function (allFriends) {
    const onlineFriends = [];
  
    for (const friend of allFriends) {
      console.log(friend);
      console.log(friend.online);
  
      if (friend.online) {
        onlineFriends.push(friend);
      }
    }
  
    return onlineFriends;
  };
  
  // console.log(getOnlineFriends(friends));
  
  const getOfflineFriends = function (allFriends) {
    const offlineFriends = [];
  
    for (const friend of allFriends) {
      console.log(friend.online);
  
      if (!friend.online) {
        offlineFriends.push(friend);
      }
    }
  
    return offlineFriends;
  };
  
  // console.log(getOfflineFriends(friends));
  
  // —Å–æ–∑–¥–∞—Ç—å 2 –º–∞—Å—Å–∏–≤–∞ –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω?
  // –µ—Å–ª–∏ —Ç—Ä—É - –≤ –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç - –≤–æ –≤—Ç–æ—Ä–æ–π
  
  const getFriendsByStatus = function (allFriends) {
    const friendsByStatus = {
      online: [],
      offline: [],
    };
  
    for (const friend of allFriends) {
      if (friend.online) {
        friendsByStatus.online.push(friend);
        continue;
      }
  
      friendsByStatus.offline.push(friend);
  
      // const key = friend.online ? 'online' : 'offline';
      // friendsByStatus[key].push(friend);
    }
  
    return friendsByStatus;
  };
  
  console.log(getFriendsByStatus(friends));


/*
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:
 * - getItems()
 * - add(product)
 * - remove(productName)
 * - clear()
 * - countTotalPrice()
 * - increaseQuantity(productName)
 * - decreaseQuantity(productName)
 *
 * { name: 'üçé', price: 50 }
 * { name: 'üçá', price: 70 }
 * { name: 'üçã', price: 60 }
 * { name: 'üçì', price: 110 }
 */

const cart = {
    items: [],
    getItems() {},
    add(product) {},
    remove(productName) {},
    clear() {},
    countTotalPrice() {},
    increaseQuantity(productName) {},
    decreaseQuantity(productName) {},
  };
  
  // console.table(cart.getItems());
  
  cart.add({ name: 'üçé', price: 50 });
  cart.add({ name: 'üçã', price: 60 });
  cart.add({ name: 'üçã', price: 60 });
  cart.add({ name: 'üçì', price: 110 });
  
  // console.table(cart.getItems());
  
  cart.remove('üçé');
  // console.table(cart.getItems());
  
  // cart.clear();
  // console.table(cart.getItems());
  
  // cart.increaseQuantity('üçé');
  // console.table(cart.getItems());
  
  // cart.decreaseQuantity('üçã');
  // cart.decreaseQuantity('üçã');
  // console.table(cart.getItems());
  
  // console.log('Total: ', cart.countTotalPrice());


  
// –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥
const fruits = ['—è–±–ª–æ–∫–æ', '–ø–µ—Ä—Å–∏–∫', '–≥—Ä—É—à–∞', '–±–∞–Ω–∞–Ω', '—Å–ª–∏–≤–∞','–∞—Ä–±—É–∑'];
// –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
const lastElementIndex = fruits.length -1


const lastElement = fruits[fruits.length -1]

console.log(fruits);
console.log(lastElement);
console.log(lastElementIndex);



// —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤
const lastWeekTemps = [1, 2, 3];
const currentWeekTemps = [4,5,6];
const nextWeekTemps = [7, 8, 9];
// spread 
const allTemps = [...lastWeekTemps, ...currentWeekTemps, ...nextWeekTemps];
console.log(allTemps);
// concat = —Ç–æ–∂–µ —Å–∞–º–æ–µ
const allT = lastWeekTemps.concat(currentWeekTemps, nextWeekTemps);



// —Ä–∞—Å–ø—ã–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤

const a = { x: 1, y: 2, };
const b = { x: 0, z: 3 };

// —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ 
// const —Å = Object.assign({}, a, b);
// –ø–µ—Ä–≤—ã–º –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –æ–±—ä–µ–∫—Ç –∫—É–¥–∞ —Ä–∞—Å–ø—ã–ª–∏—Ç—å , –∞ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Ç—É–¥–∞ —Ä–∞—Å–ø—ã–ª–∏—Ç—å 
// const —Å = {} ; Object.assign(c, a, b); = —Ç–∞–∂–µ —Å–∞–º–∞—è –∑–∞–ø–∏—Å—å

// –º–æ–¥–Ω—ã–π —Å–ø–æ—Å–æ–± 

const —Å = {
    ...a,
    ...b,
};



// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è 
const playlist = {

    name: '–º–æ–π –ø–ª–µ–π–ª–∏—Å—Ç',
    rating: 5,
    tracks: [ 'track-1', 'track-2', 'track-3'],
    trackCount: 3,
    
};

const { name, rating, tracks, trackCount : numberOfTracks = 0, author = '–°–ª—ç—à' } = playlist;
// –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ –ø–∏—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä = —Ä–∞–≤–Ω–æ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
// —á—Ç–æ –±—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é trackCount : numberOfTracks
// –±—É–∫–≤–∞–ª—å–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é numberOfTracks –ø–æ–ª–æ–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ trackCount –∏–∑ –æ–±—ä–µ–∫—Ç–∞ playlist
// –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = 0 
console.log(playlist);


// –≥–ª—É–±–æ–∫–∞—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è 

const profile = {

    nameUser: 'Mango',
    location: 'Odessa, Ukraine',
    avatar: null,
        stats : {
        likes: 5,
        followers: 12,
    }
};

const { nameUser, location, stats: { likes,followers } } = profile
// followers : myFollowers = 7
console.log(profile);
// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ 

